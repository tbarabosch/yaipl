# taken from https://llvm.org/docs/tutorial/OCamlLangImpl6.html
# sligtly adjusted to yaipl
#
extern putchard(char);

def printdensity(d)
  begin
    if d > 8 then
      putchard(32)  # ' '
    else if d > 4 then
      putchard(46)  # '.'
    else if d > 2 then
      putchard(43)  # '+'
    else
      putchard(42) # '*'
   end

# determine whether the specific location diverges.
# Solve for z = z^2 + c in the complex plane.
def mandelconverger(real imag iters creal cimag)
  begin
    if iters > 255 | (real*real + imag*imag > 4) then
     iters
   else
     mandelconverger(real*real - imag*imag + creal,
                    2*real*imag + cimag,
                    iters+1, creal, cimag)
   end

# return the number of iterations required for the iteration to escape
def mandelconverge(real imag)
  begin
    mandelconverger(real, imag, 0, real, imag)
  end

def mandelhelp(xmin xmax xstep   ymin ymax ystep)
  begin
    for y := ymin, y < ymax, ystep in
      begin
      for x := xmin, x < xmax, xstep in
        begin
         printdensity(mandelconverge(x,y));
	 putchard(10)
	end
      end	
  end

# mandel - This is a convenient helper function for plotting the mandelbrot set
# from the specified position with the specified Magnification.
def mandel(realstart imagstart realmag imagmag)
  begin
    mandelhelp(realstart, realstart+realmag*78, realmag,
             imagstart, imagstart+imagmag*40, imagmag)
  end	     
